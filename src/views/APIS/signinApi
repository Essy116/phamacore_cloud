import axios from 'axios';

const registerUser = async (formData) => {
  const errors = {};

  // üîç Basic client-side validation
  if (!formData.fullName) errors.fullName = 'Required';
  if (!formData.email) errors.email = 'Required';
  if (!formData.phone) errors.phone = 'Required';
  if (!formData.organisationName) errors.organisationName = 'Required';
  if (!formData.role) errors.role = 'Required';
  if (!formData.password) errors.password = 'Required';
  if (!formData.confirmPassword) errors.confirmPassword = 'Required';
  if (formData.password !== formData.confirmPassword) {
    errors.confirmPassword = 'Passwords do not match';
  }

  // ‚õî Return early if validation errors
  if (Object.keys(errors).length > 0) {
    return { success: false, errors };
  }

  // ‚òéÔ∏è Format phone number to start with '0'
  const phone = formData.phone.split('');
  phone.splice(0, 3, '0'); // Replace country code with '0'

  const requestData = {
    fullName: formData.fullName,
    email: formData.email,
    phoneNumber: phone.join(''),
    organisationName: formData.organisationName,
    role: formData.role,
    password: formData.password,
    confirmPassword: formData.confirmPassword,
  };

  try {
    const response = await axios.post(
      'http://20.164.20.36:86/api/v1/user/register',
      requestData,
      {
        headers: {
          Accept: 'application/json',
          'Content-Type': 'application/json',
          accesskey:
            'R0cDovL3NjaGVtYXMueG1sc29hcC5vcmcvd3MvMjAwNS8wNS9pZGVudGl0eS9',
        },
      }
    );

    return { success: true, data: response.data };
  } catch (error) {
    const apiErrors = error?.response?.data?.errors || null;
    const message =
      error?.response?.data?.message ||
      error?.response?.data?.title ||
      error.message ||
      'An error occurred. Please try again.';

    return {
      success: false,
      message,
      errors: apiErrors,
    };
  }
};

export default registerUser;
